name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Change to your default branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Aliyun Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{secrets.ALIYUN_REGISTRY}}/${{secrets.ALIYUN_NAMESPACE}}/redis_celery_test:latest
          build-args: |
            BUILDKIT_PROGRESS=plain  # Enable verbose logging

      - name: Trigger remote server deployment
        run: |
          echo "${{ secrets.REMOTE_KEY }}" > private_key
          chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }}:/home/${{ secrets.REMOTE_USER }}/redis_celery_test/
          ssh -i private_key -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_IP }} << 'EOF'
            # Set proper permissions for docker-compose.yml
            chmod 644 /home/${{ secrets.REMOTE_USER }}/redis_celery_test/docker-compose.yml
            
            # Create necessary directories with proper permissions
            cd /home/${{ secrets.REMOTE_USER }}/redis_celery_test
            # mkdir -p logs/nginx logs/gunicorn static
            # chmod -R 755 logs static
            
            # Log in to Aliyun Registry on the remote server
            echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login ${{ secrets.ALIYUN_REGISTRY }} -u ${{ secrets.ALIYUN_USERNAME }} --password-stdin
         
            cd /home/${{ secrets.REMOTE_USER }}/redis_celery_test
            docker-compose down
            docker image prune -f # remove all unused images
            docker-compose pull
            docker-compose up -d
          EOF
